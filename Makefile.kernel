# Makefile.kernel: Build a minimal Linux distro with custom Go utilities

ARCH ?= arm64
KERNEL_VERSION ?= 6.8
KERNEL_URL = "https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-$(KERNEL_VERSION).tar.xz"
# BUSYBOX_URL = https://www.busybox.net/downloads/binaries/1.21.1/busybox-$(ARCH) # very nice busybox, thanks for making us use the package manager! (bloat eww)
KERNEL_ARCHIVE = linux-$(KERNEL_VERSION).tar.xz
KERNEL_DIR = linux-$(KERNEL_VERSION)
ROOTFS_DIR = rootfs
INITRAMFS = initramfs.cpio.gz


# Set this to the password you want for dosu (required)
DOSU_PASS ?=

ISO_IMAGE = nebula.iso
ISO_DIR = iso

.PHONY: all kernel utils rootfs image clean iso quickreimage

all: kernel utils rootfs image iso
quickreimage: quickclean rootfs image iso 

# Download and extract the Linux kernel
$(KERNEL_ARCHIVE):
	wget -c $(KERNEL_URL)

$(KERNEL_DIR): $(KERNEL_ARCHIVE)
	tar -xf "$(KERNEL_ARCHIVE)"

kernel: $(KERNEL_DIR)
	- cd "$(KERNEL_DIR)" && make ARCH=$(ARCH) defconfig && sleep 5 && make bzImage -j2 && make modules -j2 || make ARCH=$(ARCH) Image -j2

# Build all Go utilities using the main Makefile
utils:
	$(MAKE) -f Makefile

# Create a minimal root filesystem and copy utilities
rootfs: utils
	rm -rf $(ROOTFS_DIR)
	mkdir -p $(ROOTFS_DIR)/bin
	# Copy all built binaries from bin/ to rootfs/bin (no utility list duplication)
	find bin -type f -executable -exec cp {} $(ROOTFS_DIR)/bin/ \;
	mkdir $(ROOTFS_DIR)/lib64
	mkdir $(ROOTFS_DIR)/lib
	# Set up dosu password and permissions
	@if [ -z "$(DOSU_PASS)" ]; then \
		echo "ERROR: DOSU_PASS must be set (e.g. make rootfs DOSU_PASS=yourpassword)"; \
		exit 1; \
	fi
	mkdir -p $(ROOTFS_DIR)/etc
	# Hash the password and write to dosu_passwd
	echo -n "$(DOSU_PASS)" | sha256sum | awk '{print $$1}' > $(ROOTFS_DIR)/etc/dosu_passwd
	chmod 600 $(ROOTFS_DIR)/etc/dosu_passwd
	# Set dosu binary permissions (setuid root)
	chown root:root $(ROOTFS_DIR)/bin/dosu || true
	chmod u+s $(ROOTFS_DIR)/bin/dosu || true
	mkdir $(ROOTFS_DIR)/root


	# Prep emergency shell (wow good job)
	cp /usr/bin/busybox $(ROOTFS_DIR)/bin/sh
	chmod +x $(ROOTFS_DIR)/bin/sh

	# Create init script
	echo '#!/bin/sh' > $(ROOTFS_DIR)/init
	echo '# Basic init script for gutils Linux' >>$(ROOTFS_DIR)/init
	echo '# Mount essential virtual filesystems' >>$(ROOTFS_DIR)/init
	echo 'mount none /proc proc' >>$(ROOTFS_DIR)/init
	echo 'mount none /sys sysfs' >>$(ROOTFS_DIR)/init
	echo 'mount none /dev devtmpfs' >>$(ROOTFS_DIR)/init
	echo '# Set up environment' >>$(ROOTFS_DIR)/init
	echo 'export PATH=/bin:/sbin:/usr/bin:/usr/sbin' >> $(ROOTFS_DIR)/init
	echo 'export HOME=/root' >>$(ROOTFS_DIR)/init
	echo 'export TERM=linux' >>$(ROOTFS_DIR)/init
	echo '# Display boot message' >>$(ROOTFS_DIR)/init
	echo 'echo "Booting gutils Linux..."' >>$(ROOTFS_DIR)/init
	echo 'echo "Starting highway shell..."' >>$(ROOTFS_DIR)/init
	echo '# Execute the custom shell' >>$(ROOTFS_DIR)/init
	echo 'exec /bin/highway' >>$(ROOTFS_DIR)/init
	echo 'echo "Oh no! An error occured loading the normal shell!"' >>$(ROOTFS_DIR)/init
	echo 'echo "Loading into emergency shell...."' >>$(ROOTFS_DIR)/init
	echo '# Execute the emergency shell' >>$(ROOTFS_DIR)/init
	echo 'exec /bin/sh' >>$(ROOTFS_DIR)/init

# Create an initramfs image
image: rootfs
	# Prepare GRUB files in rootfs for initramfs
	# mkdir -p $(ROOTFS_DIR)/boot/grub
	#cp /usr/lib/ISOLINUX/isolinux.bin $(ROOTFS_DIR)/boot/isolinux/ 2>/dev/null || true
	#cp /usr/lib/ISOLINUX/*.c32 $(ROOTFS_DIR)/boot/isolinux/ 2>/dev/null || true
	mkdir -p $(ROOTFS_DIR)/boot/efi/EFI/BOOT
	cp -r /boot/grub $(ROOTFS_DIR)/boot/grub
	cp -r /boot/efi/EFI/BOOT/* $(ROOTFS_DIR)/boot/efi/EFI/BOOT
	cp -r $(ISO_DIR)/boot $(ROOTFS_DIR) 2>/dev/null || true
	chmod 644 $(ROOTFS_DIR)/boot/grub/* 2>/dev/null || true
	chmod +x $(ROOTFS_DIR)/init
	cd $(ROOTFS_DIR) && find . | cpio -o -H newc | gzip > ../$(INITRAMFS)

clean:
	rm -rf $(KERNEL_DIR) $(KERNEL_ARCHIVE) $(ROOTFS_DIR) bin $(INITRAMFS) 

quickclean:
	rm -rf $(ROOTFS_DIR) $(INITRAMFS) 

iso: image kernel
	# Prepare ISO directory structure
	# mkdir -p $(ISO_DIR)/boot/isolinux # no more support for ISOLINUX!
	cp -r $(KERNEL_DIR)/arch/$(ARCH)/boot/Image $(ISO_DIR)/boot/vmlinuz || cp -r $(KERNEL_DIR)/arch/$(ARCH)/boot/bzImage $(ISO_DIR)/boot/vmlinuz || cp -r "$(KERNEL_DIR)/arch/$(ARCH)/boot/compressed/*" "$(ISO_DIR)/boot/vmlinuz"
	cp $(INITRAMFS) $(ISO_DIR)/boot/initramfs.cpio.gz
	# Generate GRUB config.
	cp -r $(ROOTFS_DIR)/boot/* $(ISO_DIR)/boot
	# printf "UI menu.c32\nPROMPT 0\nTIMEOUT 50\nDEFAULT 50\nLABEL NebuLa\n  KERNEL /boot/vmlinuz\n  INITRD /boot/initramfs.cpio.gz\n  APPEND init=/init\n" > $(ISO_DIR)/boot/isolinux/isolinux.cfg
	cp -r /boot/grub $(ISO_DIR)/boot/grub
	printf 'set default=0\nset timeout=5\n\nmenuentry "NebuLa" { /boot/* console=ttyAMA0\n\tinitrd /boot/initramfs.cpio.gz \n}\n' > $(ISO_DIR)/boot/grub/grub.cfg
	# Double check that init script is in ISO directory
	cp $(ROOTFS_DIR)/init $(ISO_DIR)/init 
	# Add proper permissions
	chmod 644 $(ISO_DIR)/boot/efi/EFI
	chmod +x $(ISO_DIR)/init
	rm -rf $(ISO_DIR)/EFI || echo No EFI folder - moving on
	mkdir $(ISO_DIR)/EFI
	cp -r /boot/efi/efi/* $(ISO_DIR)/EFI
	- rm $(ISO_DIR)/EFI/fedora/grub.cfg
	- rm $(ISO_DIR)/EFI/ubuntu/grub.cfg
	- cp $(ISO_DIR)/boot/grub/grub.cfg $(ISO_DIR)/EFI/ubuntu
	- cp $(ISO_DIR)/boot/grub/grub.cfg $(ISO_DIR)/EFI/fedora
	# Then create the ISO with proper options
	grub-mkrescue -o $(ISO_IMAGE) iso/ --modules="linux normal efi_gop part_gpt" --directory="/usr/lib/grub/$(ARCH)-efi"
