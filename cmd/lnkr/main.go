package main

import (
	"fmt"
	"os"
)

// lnkr: minimal homemade linker stub. Usage: lnkr OBJFILES... -o OUTPUT
func main() {
	if len(os.Args) < 4 {
		fmt.Fprintln(os.Stderr, "lnkr: usage: lnkr OBJFILES... -o OUTPUT")
		os.Exit(1)
	}
	args := os.Args[1:]
	output := "a.out"
	for i, arg := range args {
		if arg == "-o" && i+1 < len(args) {
			output = args[i+1]
		}
	}
	fmt.Println("lnkr: would link to output:", output)
	// Check object files
	linked := []string{}
	for _, arg := range args {
		if arg == "-o" {
			break
		}
		if _, err := os.Stat(arg); err != nil {
			fmt.Printf("lnkr: missing object file: %s\n", arg)
		} else {
			fmt.Printf("lnkr: found object file: %s\n", arg)
			linked = append(linked, arg)
		}
	}
	// Write minimal output file
	out, err := os.Create(output)
	if err != nil {
		fmt.Fprintln(os.Stderr, "lnkr: cannot write output:", err)
		os.Exit(1)
	}
	defer out.Close()
	fmt.Fprintf(out, "# Linked output generated by lnkr\n")
	for _, l := range linked {
		fmt.Fprintf(out, "# linked: %s\n", l)
	}
	fmt.Fprintf(out, "# (no real linking performed yet)\n")
	fmt.Println("lnkr: wrote output to", output)
}
